%{
    #include <iostream>
    #include <string>
    #include <fstream>
    #include <vector>
    #include "symtab.hpp"
    #include "target_generator.hpp"
    #include "intermediate_generator.hpp"

    using namespace std;

    extern int yylineno;
    extern FILE* yyin;
    int yylex();
    int yyerror(string s);

    intermediate_generator* igen;
    target_generator* gen;
    symtab* sym;
    vector<instruction*> instructions;
    vector<string> code;
%}

%union {
    long long num;
    std::string* pid;
    symbol* sym;
    goto_label* label;
    for_data* data;
}

%token VAR t_BEGIN END ASSIGN IF THEN ELSE ENDIF
%token ENDWHILE UNTIL FROM TO DOWNTO ENDFOR DO
%token <label> WHILE REPEAT
%token <data> FOR
%token READ WRITE 
%token EQ NEQ LE GE LEQ GEQ 
%token COMMA COLON SEMICOLON LBRACKET RBRACKET
%token ERROR

%token <num> NUM
%token <pid> PIDENTIFIER

%left PLUS MINUS
%left TIMES t_DIV t_MOD

%type <sym> value
%type <sym> expression
%type <sym> identifier
%type <label> condition

%start program

%%
program     : VAR declarations t_BEGIN commands END                             {igen->new_stop();}
            | t_BEGIN commands END                                              {igen->new_stop();}
            ;

declarations: declarations COMMA PIDENTIFIER                                    {sym->putsym(*$3);}
            | declarations COMMA PIDENTIFIER LBRACKET NUM COLON NUM RBRACKET    {sym->putarr(*$3, $5, $7);}
            | PIDENTIFIER                                                       {sym->putsym(*$1);}
            | PIDENTIFIER LBRACKET NUM COLON NUM RBRACKET                       {sym->putarr(*$1, $3, $5);}
            ;

commands    : commands command
            | command
            ;

command     : identifier ASSIGN expression SEMICOLON                            {igen->new_assign($1);}
            | IF condition THEN commands                                        {$2=igen->new_if_else($2);}
              ELSE commands ENDIF                                               {igen->new_if($2);}
            | IF condition THEN commands ENDIF                                  {igen->new_if($2);}
            | WHILE                                                             {$1 = igen->new_loop_start();}
              condition DO commands ENDWHILE                                    {igen->new_while($1, $3);}
            | REPEAT                                                            {$1 = igen->new_loop_start();}
              commands UNTIL condition SEMICOLON                                {igen->new_repeat($1);}
            | FOR PIDENTIFIER FROM value TO value DO                            {sym->putit(*$2);
                                                                                 $1=igen->new_for_start(sym->getsym(*$2), sym->get_new_temp(), $4, $6, false);}
              commands ENDFOR                                                   {igen->new_for_end($1, sym->getsym(*$2), sym->get_const(1), false);
                                                                                 sym->delsym(*$2);
                                                                                 sym->delsym($1->temp->name);}
            | FOR PIDENTIFIER FROM value DOWNTO value DO                        {sym->putit(*$2);
                                                                                 $1=igen->new_for_start(sym->getsym(*$2), sym->get_new_temp(), $4, $6, true);}
              commands ENDFOR                                                   {igen->new_for_end($1, sym->getsym(*$2), sym->get_const(1), true);
                                                                                 sym->delsym(*$2);
                                                                                 sym->delsym($1->temp->name);}
            | READ identifier SEMICOLON                                         {igen->new_read($2);}
            | WRITE value SEMICOLON                                             {igen->new_write($2);}
            ;

expression  : value                                                             {igen->new_load($1);}
            | value PLUS value                                                  {igen->new_add($1, $3);}
            | value MINUS value                                                 {igen->new_sub($1, $3);}
            | value TIMES value                                                 {igen->new_mul($1, $3);}
            | value t_DIV value                                                 {igen->new_div($1, $3);}
            | value t_MOD value                                                 {igen->new_mod($1, $3);}
            ;

condition   : value EQ value                                                    {$$=igen->new_eq($1, $3);}
            | value NEQ value                                                   {$$=igen->new_neq($1, $3);}
            | value LE value                                                    {$$=igen->new_le($1, $3);}
            | value GE value                                                    {$$=igen->new_ge($1, $3);}
            | value LEQ value                                                   {$$=igen->new_leq($1, $3);}
            | value GEQ value                                                   {$$=igen->new_geq($1, $3);}
            ;

value       : NUM                                                               {$$=sym->get_const($1);}
            | identifier                                                        {$$=$1;}

identifier  : PIDENTIFIER                                                       {$$=sym->get_var(*$1);}
            | PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET                         {$$=sym->get_var(*$1, *$3);}
            | PIDENTIFIER LBRACKET NUM RBRACKET                                 {$$=sym->get_var(*$1, $3);}

%%

int yyerror(string s) {
    cout << s << " at line " << yylineno << endl;
};

int main(int argc, char **argv) {
    if (argc < 2) {
        cerr << "\e[31mError: \e[0mNo input file" << endl;
        return 1;
    }

    FILE *src = fopen(argv[1], "r");

    if (!src) {
        cerr << "\e[31mError: \e[0mCannot open file " << argv[1] << endl;
        return 1;
    }

    sym = new symtab();
    igen = new intermediate_generator();
    gen = new target_generator();

    yyin = src;
    yyparse();
    fclose(src);

    ofstream output;
    output.open(argv[2] ? argv[2] : "a.out");

    instructions = igen->get_instructions();
    gen->generate_code(instructions);
    code = gen->get_code();

    sym->print();
    vector<string>::iterator it;

    for(it = code.begin(); it != code.end(); it++) {
        output << *it << endl;
    }
    output.close();

    igen->render();
}
